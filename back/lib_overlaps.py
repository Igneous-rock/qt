import osimport ogr,gdal,osrimport geo_shape as GS	def index_by_key(f_pr,_field):	ref_pr = GS.geo_shape.open(f_pr)	lyr_pr = ref_pr.get_layer(0)		n_ft_m = lyr_pr.layer.GetFeatureCount()	dic_code_num = {}	for i in xrange(n_ft_m):		ft_mg = lyr_pr.layer.GetFeature(i)		code_u = str(ft_mg.GetField(_field))		if code_u in dic_code_num:			dic_code_num[code_u].append(i)		else:			dic_code_num[code_u] = [i]		ft_mg.Destroy()	return dic_code_num		def get_neighbor_pr(pathrow,dic_pr_i):	path = int(pathrow[:3])	row  = int(pathrow[3:])		ls_test = []	ls_test.append(str(path + 1) + '0' + str(row - 1))    		# 1 2 3	ls_test.append(str(path) + '0' + str(row - 1))    		    # 4   5	ls_test.append(str(path - 1) + '0' + str(row - 1))          # 6 7 8		ls_test.append(str(path + 1) + '0' + str(row))	ls_test.append(str(path) + '0' + str(row))	ls_test.append(str(path - 1) + '0' + str(row))	ls_test.append(str(path + 1) + '0' + str(row + 1))	ls_test.append(str(path) + '0' + str(row + 1))	ls_test.append(str(path - 1) + '0' + str(row + 1))		ls_neighbor_pr = []	for pr in ls_test:		if pr in dic_pr_i: ls_neighbor_pr.append(pr)		return ls_neighbor_pr	def get_overlap_pr(geom_lake,lyr_pr,ls_neighbor_pr,dic_pr_i):	lst_overlap = []	lst_within = []	for pr in ls_neighbor_pr:		li_ft = dic_pr_i[pr]		ft_pr = lyr_pr.layer.GetFeature(li_ft[0])		geom_pr = ft_pr.GetGeometryRef()				if geom_lake.Overlaps(geom_pr):			lst_overlap.append(pr)		elif geom_lake.Within(geom_pr):			lst_within.append(pr)	return lst_within,lst_overlapdef check_lakes_o_pr(f_ref,f_pr):	dic_pr_i = index_by_key(f_pr,'PR')	ref_ref = GS.geo_shape.open(f_ref)	lyr_ref = ref_ref.get_layer(0)		ref_pr = GS.geo_shape.open(f_pr)	lyr_pr = ref_pr.get_layer(0)		dic_ui_prwo = {}		n_ft = lyr_ref.layer.GetFeatureCount()	for i in xrange(n_ft):		ft_lake = lyr_ref.layer.GetFeature(i)		pr = ft_lake.GetField('PathRow')		ui = ft_lake.GetField('Code_uniq')		#if ui <> 2000:continue		ls_neighbor_pr = get_neighbor_pr(pr,dic_pr_i)				geom_lake = ft_lake.GetGeometryRef()		lst_within,lst_overlap = get_overlap_pr(geom_lake,lyr_pr,ls_neighbor_pr,dic_pr_i)		dic_ui_prwo[ui] = [pr,lst_within,lst_overlap]	return dic_ui_prwo	def within_or_overlaps(dic_ui_prwo):	dic_ui_combmethod = {}	ks = dic_ui_prwo.keys()	for k in ks:		pr = dic_ui_prwo[k][0]		if pr in dic_ui_prwo[k][1]:			dic_ui_combmethod[k] = ['within',pr]		else:			dic_ui_combmethod[k] = ['overlaps',dic_ui_prwo[k][2]]	return dic_ui_combmethod	def analysis_choose_or_union(f_ref,f_pr):	dic_ui_prwo = check_lakes_o_pr(f_ref,f_pr)	dic_ui_combmethod = within_or_overlaps(dic_ui_prwo)	return dic_ui_combmethod	#-----------------------------------------------------------------------	def mkdic_ui_pr(f_ref,f_pr):	dic_ui_wo = {}		ref_ref = GS.geo_shape.open(f_ref)	lyr_ref = ref_ref.get_layer(0)	nft_lake = lyr_ref.layer.GetFeatureCount()		ref_pr = GS.geo_shape.open(f_pr)	lyr_pr = ref_pr.get_layer(0)	nft_pr = lyr_pr.layer.GetFeatureCount()		print 'checking lakes located on pathrow'	p10 = nft_lake/10	_e = nft_lake%10	for i in xrange(nft_lake):		ft_lake = lyr_ref.layer.GetFeature(i)		ui = ft_lake.GetField('Code_uniq')		geom_lake = ft_lake.GetGeometryRef()		count = i+1		if count%p10 == _e: print '{:.1%}'.format(float(count)/nft_lake),'ui =',ui				lst_within = []		lst_overlap = []		for j in xrange(nft_pr):			ft_pr = lyr_pr.layer.GetFeature(j)			pr = ft_pr.GetField('PR')			geom_pr = ft_pr.GetGeometryRef()			if geom_lake.Within(geom_pr):				lst_within.append(pr)			elif geom_lake.Overlaps(geom_pr):				lst_overlap.append(pr)						dic_ui_wo[ui] = [lst_within,lst_overlap]	return dic_ui_wo															