	def colorate_lake(p_in_scene):	f_b1 = p_in_scene + '/sr_band1_30m.img'	f_b2 = p_in_scene + '/sr_band2_30m.img'	f_b3 = p_in_scene + '/sr_band3_30m.img'	f_b4 = p_in_scene + '/sr_band4_30m.img'	f_b5 = p_in_scene + '/sr_band5_30m.img'	f_b6 = p_in_scene + '/sr_band6_30m.img'	f_b7 = p_in_scene + '/sr_band7_30m.img'	f_fill = p_in_scene + '/fill_mndwi.img'	p_render = p_in_scene + '/render'	if not os.path.isdir(p_render):		os.mkdir(p_render)	f_vct = p_render + '/lakes_rendering.shp'	#'''	fs_ori = [f_b5,f_b4,f_b2]	f_pct,fs_upscale = lib_rendering.upscaling_raster(fs_ori,p_render,180)	f_rgb = p_render + '/542.png'	lib_rendering.three_bands_to_rgb(f_pct,[1,2,3],f_rgb)		f_mndwi = p_in_scene + '/mndwi.img'	f_upscale,fs_upscale = lib_rendering.upscaling_raster([f_mndwi],p_render,180)	lib_rendering.polygonize_scene(p_render,f_fill,f_vct)	#'''	f_render = p_render + '/result.png'	lib_rendering.mapnik_rendering(f_upscale,f_vct,f_render)	#lib_rendering.mapnik_rendering(f_rgb,f_vct,f_render)	import time,osimport lib_renderingif __name__ == '__main__':	a = time.clock()	p_test = '/mnt/data_3t_a/jiangh/result/lake_typical/p138r039/L5_p138r039_20041104'	colorate_lake(p_test)	print time.clock() -a	print 'done'