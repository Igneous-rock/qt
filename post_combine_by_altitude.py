#-*- coding: UTF-8 -*-def sub__index_feature_by_field(layer,str_fd):	n_ft = layer.GetFeatureCount()	dic_code_i = {}	for i in xrange(n_ft):		ft_mg = layer.GetFeature(i)		code_u = ft_mg.GetField(str_fd)		dic_code_i[code_u] = i		ft_mg.Destroy()	return dic_code_i#-----------------------------------------------------------------------------def sub__resotre_fields(layer_ref,layer_out):	dfn_lyr_ref = layer_ref.GetLayerDefn()  	n_field_ref = dfn_lyr_ref.GetFieldCount()	ls_fields = []	for i in range(n_field_ref):		#---- retrieve old field		fd_ref =dfn_lyr_ref.GetFieldDefn(i)				name_fd = fd_ref.GetNameRef()		if name_fd in ['Area','Perimeter','ºş²´Ãæ»ı']: continue		type_field = fd_ref.GetType()				width_fd = fd_ref.GetWidth()		prcn_fd = fd_ref.GetPrecision()		ls_fields.append(name_fd)				#---- generate new field		dfn_field = ogr.FieldDefn(name_fd, type_field)		dfn_field.SetWidth(width_fd)		dfn_field.SetPrecision(prcn_fd)		layer_out.CreateField(dfn_field)		for name_fd in ['Area','Perimeter']:		if name_fd in ls_fields: continue		_type = ogr.OFTReal					dfn_field = ogr.FieldDefn(name_fd, _type)		ls_fields.append(name_fd)		dfn_field.SetPrecision(10)		layer_out.CreateField(dfn_field)		return layer_out.GetLayerDefn(),ls_fieldsdef lst_2_dic_name_i(lst_fields):	dic_name_i = {}	for i in range(len(lst_fields)):		dic_name_i[lst_fields[i]] = i	return dic_name_i	#--------------------------------------------------------------------------------------def combine_2wi(f_ref,f_mndwi,f_ndwi,f_combo):	#---- init	ref_ref = GS.geo_shape.open(f_ref)	lyr_ref = ref_ref.get_layer(0)	layer_ref = lyr_ref.layer	lst_exd = ['Id','PathRow','Day','Source','Name']	dic_ui_alt,lst_fields = lyr_ref.dic_all_fields('Code_uniq',lst_exclude = lst_exd)	dic_name_i = lst_2_dic_name_i(lst_fields)		ref_mndwi = GS.geo_shape.open(f_mndwi)	lyr_mndwi= ref_mndwi.get_layer(0)	proj_in = lyr_mndwi.spatial_ref	layer_mndwi = lyr_mndwi.layer	ref_ndwi = GS.geo_shape.open(f_ndwi)	lyr_ndwi= ref_ndwi.get_layer(0)	layer_ndwi = lyr_ndwi.layer		#---- create new	ogr.RegisterAll()	driver = ogr.GetDriverByName("ESRI Shapefile")	if os.access(f_combo, os.F_OK):		driver.DeleteDataSource(f_combo)			ds_out = driver.CreateDataSource(f_combo)	layer_out = ds_out.CreateLayer("combine_2wi", srs = proj_in)	dfn_layer,ls_fields = sub__resotre_fields(layer_ref,layer_out)		#dic_cf_ref   = sub__index_feature_by_field(layer_ref,'Code_uniq')	dic_cf_mndwi = sub__index_feature_by_field(layer_mndwi,'Code_uniq')	dic_cf_ndwi  = sub__index_feature_by_field(layer_ndwi,'Code_uniq')		uis = list(set(dic_cf_mndwi.keys() + dic_cf_ndwi.keys() ))	uis.sort()	for ui in uis:		alt_ref  = dic_ui_alt[ui][dic_name_i['Altitude']]		area_ref = dic_ui_alt[ui][dic_name_i['Area']]		if alt_ref > G_t_alt and area_ref < G_t_area and (ui in dic_cf_ndwi):			layer_chose = layer_ndwi			i_ft = dic_cf_ndwi[ui]		else:			layer_chose = layer_mndwi			i_ft = dic_cf_mndwi[ui]				ft_chs = layer_chose.GetFeature(i_ft)		geom_chs = ft_chs.GetGeometryRef()				ft_out = ogr.Feature(dfn_layer)		ft_out.SetGeometry(geom_chs)		r_area = geom_chs.Area() / 1000000.0		r_perimeter = geom_chs.Boundary().Length() / 1000.0				for fd in ls_fields:			if fd == 'Area':				cnt_fd = r_area			elif fd == 'Perimeter':				cnt_fd = r_perimeter			else:				cnt_fd = ft_chs.GetField(fd)			ft_out.SetField(fd, cnt_fd)		layer_out.CreateFeature(ft_out)		ft_chs.Destroy()		ft_out.Destroy()	ds_out.Destroy()	def combine_by_alt(p_vector):	f_mndwi = p_vector + '/itpcas2000/dissolved_mndwi.shp'	f_ndwi = p_vector + '/itpcas2000/dissolved_ndwi.shp'	f_ref = p_vector + '/2000_Merge_ui.shp'	f_combo = p_vector + '/itpcas2000/lakes_combined.shp'	combine_2wi(f_ref,f_mndwi,f_ndwi,f_combo)	f_sift = p_vector + '/itpcas2000/lakes_sift.shp'			post_sift_by_area.post_sift_by_area(p_vector)		G_t_alt = 5000G_t_area = 10.0	import ogr,gdal,osrimport osimport lib_IOimport geo_shape as GSimport timeimport post_sift_by_area#--------------------------------------------------------------if __name__ == '__main__':	a = time.clock()	p_vector = '/mnt/data_3t_a/jiangh/vector'	combine_by_alt(p_vector)	print time.clock() -a	print 'done'